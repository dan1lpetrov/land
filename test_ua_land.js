import puppeteer from 'puppeteer';

async function debugUaLand() {
    const browser = await puppeteer.launch({
        headless: false, // –ü–æ–∫–∞–∑—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        defaultViewport: { width: 1400, height: 900 },
    });

    try {
        const page = await browser.newPage();
        await page.setUserAgent(
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        );

        // –¢–µ—Å—Ç–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        const testUrl = 'https://ua.land/auctions/LAP001-UA-20250729-17116/';
        console.log(`üîç –¢–µ—Å—Ç—É—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${testUrl}`);
        
        await page.goto(testUrl, { waitUntil: 'networkidle2', timeout: 60000 });
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        console.log('üîç –†–æ–∑–∫—Ä–∏–≤–∞—é –≤—Å—ñ accordion –µ–ª–µ–º–µ–Ω—Ç–∏...');
        try {
            const accordionSelector = '.MuiAccordion-root .MuiAccordionSummary-root';
            await page.waitForSelector(accordionSelector, { timeout: 10000 });
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å accordion –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            const accordionCount = await page.evaluate(() => {
                return document.querySelectorAll('.MuiAccordion-root .MuiAccordionSummary-root').length;
            });
            
            console.log(`  –ó–Ω–∞–π–¥–µ–Ω–æ ${accordionCount} accordion –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`);
            
            // –†–æ–∑–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ accordion –µ–ª–µ–º–µ–Ω—Ç–∏ —á–µ—Ä–µ–∑ JavaScript
            await page.evaluate(() => {
                const accordions = document.querySelectorAll('.MuiAccordion-root');
                accordions.forEach(accordion => {
                    const summary = accordion.querySelector('.MuiAccordionSummary-root');
                    if (summary && !accordion.classList.contains('Mui-expanded')) {
                        summary.click();
                    }
                });
            });
            
            console.log('  ‚úÖ –í—Å—ñ accordion –µ–ª–µ–º–µ–Ω—Ç–∏ —Ä–æ–∑–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ JavaScript');
            
            // –û—á—ñ–∫—É—î–º–æ –ø–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è
            await new Promise(resolve => setTimeout(resolve, 3000));
            console.log('‚úÖ –í—Å—ñ accordion –µ–ª–µ–º–µ–Ω—Ç–∏ —Ä–æ–∑–∫—Ä–∏—Ç–æ');
            
        } catch (accordionError) {
            console.log(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—ñ accordion –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${accordionError.message}`);
        }
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è JavaScript
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏...');
        const title = await page.title();
        console.log(`  –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ${title}`);
        
        // –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç
        const simpleTest = await page.evaluate(() => {
            return {
                h4Count: document.querySelectorAll('h4').length,
                h6Count: document.querySelectorAll('h6').length,
                bodyText: document.body.textContent.substring(0, 200)
            };
        });
        
        console.log('üìä –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç:');
        console.log(`  H4 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${simpleTest.h4Count}`);
        console.log(`  H6 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${simpleTest.h6Count}`);
        console.log(`  –ü–æ—á–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç—É: ${simpleTest.bodyText}`);
        
        // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª–æ–≥—ñ–∫—É –∑ index.js
        const pageStructure = await page.evaluate(() => {
            try {
                const results = {
                    // –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
                    lotDescription: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    area: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    startPrice: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    normativePrice: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    expertPrice: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    cadastralNumber: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    region: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    settlement: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    organizationName: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    contactPerson: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    phoneNumber: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    auctionDate: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    proposalPeriod: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    propertyClassifier: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    lotExhibitedBy: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                     coordinates: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    koatuu: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    postalCode: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                    
                    // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ
                    h4Elements: [],
                    h6Elements: [],
                    keywordSearch: {}
                };
                
                // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ h6 –µ–ª–µ–º–µ–Ω—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑
                const allH6Elements = document.querySelectorAll('h6');
                
                // –û–ø–∏—Å –ª–æ—Ç—É
                const lotDescElement = document.querySelector('.MuiGrid-spacing-xs-3 div:nth-of-type(3) div.MuiAccordionDetails-root');
                if (lotDescElement && lotDescElement.textContent.trim()) {
                    results.lotDescription = lotDescElement.textContent.trim();
                }
                
                // –ü–ª–æ—â–∞ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏, –≥–∞
                let areaElement = null;
                
                // –í–∞—Ä—ñ–∞–Ω—Ç 1: div:nth-of-type(4) h5
                areaElement = document.querySelector('div:nth-of-type(4) h5');
                if (!areaElement || !areaElement.textContent.trim()) {
                    // –í–∞—Ä—ñ–∞–Ω—Ç 2: —à—É–∫–∞—î–º–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
                    const mainContainer = document.querySelector('main') || document.querySelector('.MuiContainer-root') || document.body;
                    areaElement = mainContainer.querySelector('div:nth-of-type(4) h5');
                }
                if (!areaElement || !areaElement.textContent.trim()) {
                    // –í–∞—Ä—ñ–∞–Ω—Ç 3: —à—É–∫–∞—î–º–æ —Å–µ—Ä–µ–¥ –≤—Å—ñ—Ö h5 –∑ —á–∏—Å–ª–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
                    const allH5 = document.querySelectorAll('h5');
                    for (const h5 of allH5) {
                        const text = h5.textContent.trim();
                        if (text && /^\d+\.?\d*$/.test(text)) { // –ß–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                            areaElement = h5;
                            break;
                        }
                    }
                }
                
                if (areaElement && areaElement.textContent.trim()) {
                    results.area = areaElement.textContent.trim();
                }
                
                // –°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞
                const startPriceElement = document.querySelector('h3.MuiTypography-colorPrimary');
                if (startPriceElement && startPriceElement.textContent.trim()) {
                    const priceText = startPriceElement.textContent.trim();
                    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä, –∫—Ä–∞–ø–∫–∏ —Ç–∞ –∫–æ–º–∏
                    results.startPrice = priceText.replace(/[^\d.,]/g, '');
                }
                
                // –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞ –≥—Ä–æ—à–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞, –≥—Ä–Ω - —à—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞
                for (const h6 of allH6Elements) {
                    const text = h6.textContent.trim();
                    if (text === '–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞ –≥—Ä–æ—à–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞, –≥—Ä–Ω:') {
                        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π div –∑ –∫–ª–∞—Å–æ–º MuiGrid-container
                        const parentContainer = h6.closest('.MuiGrid-container');
                        if (parentContainer) {
                            // –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π div –∑ –∫–ª–∞—Å–æ–º MuiGrid-grid-md-true
                            const valueElement = parentContainer.querySelector('.MuiGrid-grid-md-true h6');
                            if (valueElement && valueElement.textContent.trim() && valueElement !== h6) {
                                const valueText = valueElement.textContent.trim();
                                if (valueText === '–ù–µ –≤–∫–∞–∑–∞–Ω–æ') {
                                    results.normativePrice = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
                                } else {
                                    results.normativePrice = valueText.replace(/[^\d.,]/g, '');
                                }
                                break;
                            }
                        }
                    }
                }
                
                // –Ø–∫—â–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                if (results.normativePrice === '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ') {
                    results.normativePrice = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
                }
                
                // –ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≥—Ä–æ—à–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞, –≥—Ä–Ω - —à—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞
                for (const h6 of allH6Elements) {
                    const text = h6.textContent.trim();
                    if (text === '–ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –≥—Ä–æ—à–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞, –≥—Ä–Ω:') {
                        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π div –∑ –∫–ª–∞—Å–æ–º MuiGrid-container
                        const parentContainer = h6.closest('.MuiGrid-container');
                        if (parentContainer) {
                            // –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π div –∑ –∫–ª–∞—Å–æ–º MuiGrid-grid-md-true
                            const valueElement = parentContainer.querySelector('.MuiGrid-grid-md-true h6');
                            if (valueElement && valueElement.textContent.trim() && valueElement !== h6) {
                                results.expertPrice = valueElement.textContent.trim().replace(/[^\d.,]/g, '');
                                break;
                            }
                        }
                    }
                }
                
                // –ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä - —Å–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ –º–∞–π–Ω–∞
                let cadastralNumber = '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
                
                // –ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä - —à—É–∫–∞—î–º–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ —Å—ñ—Ç–∫–∏
                const cadastralLabel = Array.from(allH6Elements).find(h6 => h6.textContent.trim() === '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä:');
                
                if (cadastralLabel) {
                    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—ñ—Ç–∫–∏
                    const gridContainer = cadastralLabel.closest('.MuiGrid-container');
                    if (gridContainer) {
                        // –®—É–∫–∞—î–º–æ –≤ —Ç–æ–º—É –∂ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ h6 –∑ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º
                        const cadastralLink = gridContainer.querySelector('a[href*="cadnum"]');
                        if (cadastralLink) {
                            cadastralNumber = cadastralLink.textContent.trim();
                        } else {
                            // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —à—É–∫–∞—î–º–æ h6 –≤ —Ç–æ–º—É –∂ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
                            const allH6InContainer = gridContainer.querySelectorAll('h6');
                            for (const h6 of allH6InContainer) {
                                if (h6.textContent.trim() !== '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä:' && /^[0-9:]+$/.test(h6.textContent.trim())) {
                                    cadastralNumber = h6.textContent.trim();
                                    break;
                                }
                            }
                        }
                    }
                }
                
                // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ, —à—É–∫–∞—î–º–æ –∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
                if (cadastralNumber === '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ') {
                    const cadastralElement = document.querySelector('.MuiGrid-spacing-xs-1 a.MuiLink-underlineAlways');
                    if (cadastralElement && cadastralElement.textContent.trim()) {
                        const cadastralText = cadastralElement.textContent.trim();
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä (–º—ñ—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–∏ —Ç–∞ –¥–≤–æ–∫—Ä–∞–ø–∫–∏)
                        if (/^\d+:\d+:\d+:\d+$/.test(cadastralText)) {
                            cadastralNumber = cadastralText;
                        }
                    }
                }
                
                results.cadastralNumber = cadastralNumber;
                
                // –û–±–ª–∞—Å—Ç—å - –≤–∏—Ç—è–≥—É—î–º–æ –∑ –æ–ø–∏—Å—É –ª–æ—Ç—É
                const lotDescText = results.lotDescription;
                if (lotDescText && lotDescText !== '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ') {
                    const regionMatch = lotDescText.match(/([–ê-–Ø–∞-—è—ñ—ó—î“ë–Ü–á–Ñ“ê\s]+)\s*–æ–±–ª–∞—Å—Ç—å/i);
                    if (regionMatch) {
                        results.region = regionMatch[1].trim() + ' –æ–±–ª–∞—Å—Ç—å';
                    }
                }
                
                // –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç - –≤–∏—Ç—è–≥—É—î–º–æ –∑ –æ–ø–∏—Å—É –ª–æ—Ç—É
                if (lotDescText && lotDescText !== '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ') {
                    const settlementMatch = lotDescText.match(/–æ–±–ª–∞—Å—Ç—å[,\s]+([^,]+)/i);
                    if (settlementMatch) {
                        results.settlement = settlementMatch[1].trim();
                    }
                }
                
                // –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è - —à—É–∫–∞—î–º–æ –≤ accordion "–î–∞–Ω—ñ –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑ –ø–µ—Ä–µ–≤–∞–∂–Ω–∏–º –ø—Ä–∞–≤–æ–º"
                const accordions = document.querySelectorAll('.MuiAccordion-root');
                for (const accordion of accordions) {
                    const summary = accordion.querySelector('.MuiAccordionSummary-root');
                    if (summary && summary.textContent.includes('–î–∞–Ω—ñ –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑ –ø–µ—Ä–µ–≤–∞–∂–Ω–∏–º –ø—Ä–∞–≤–æ–º')) {
                        const details = accordion.querySelector('.MuiAccordionDetails-root');
                        if (details) {
                            const orgMatch = details.textContent.match(/–ü–æ–≤–Ω–∞ —é—Ä–∏–¥–∏—á–Ω–∞ –Ω–∞–∑–≤–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó:\s*([^\n]+?)(?:\s*–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó:|$)/);
                            if (orgMatch) {
                                results.organizationName = orgMatch[1].trim();
                                break;
                            }
                        }
                    }
                }
                
                // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞ - —à—É–∫–∞—î–º–æ –≤ accordion "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞"
                for (const accordion of accordions) {
                    const summary = accordion.querySelector('.MuiAccordionSummary-root');
                    if (summary && summary.textContent.includes('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞')) {
                        const details = accordion.querySelector('.MuiAccordionDetails-root');
                        if (details) {
                            const pibMatch = details.textContent.match(/–ü–Ü–ë:\s*([^\n]+?)(?:\s*E-mail:|$)/);
                            if (pibMatch) {
                                results.contactPerson = pibMatch[1].trim();
                            }
                            
                            const phoneMatch = details.textContent.match(/–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\s*([^\n]+?)(?:\s*–í–µ–± –∞–¥—Ä–µ—Å–∞:|$)/);
                            if (phoneMatch) {
                                results.phoneNumber = phoneMatch[1].trim();
                            }
                            break;
                        }
                    }
                }
                
                // –î–∞—Ç–∞ –∞—É–∫—Ü—ñ–æ–Ω—É - —à—É–∫–∞—î–º–æ h5 –∑ –¥–∞—Ç–æ—é
                const allH5 = document.querySelectorAll('h5');
                for (const h5 of allH5) {
                    const text = h5.textContent.trim();
                    if (text && /^\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}$/.test(text)) {
                        results.auctionDate = text;
                        break;
                    }
                }
                
                // –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –º–∞–π–Ω–∞ - —à—É–∫–∞—î–º–æ –≤ accordion "–°–∫–ª–∞–¥ –ª–æ—Ç–∞"
                for (const accordion of accordions) {
                    const summary = accordion.querySelector('.MuiAccordionSummary-root');
                    if (summary && summary.textContent.includes('–°–∫–ª–∞–¥ –ª–æ—Ç–∞')) {
                        const details = accordion.querySelector('.MuiAccordionDetails-root');
                        if (details) {
                            const classifierMatch = details.textContent.match(/–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –º–∞–π–Ω–∞\/–∞–∫—Ç–∏–≤—ñ–≤:([^\n]+)/);
                            if (classifierMatch) {
                                results.propertyClassifier = classifierMatch[1].trim();
                                break;
                            }
                        }
                    }
                }
                
                // –õ–æ—Ç –≤–∏—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è - —Å–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ h4 –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
                let lotExhibitedBy = '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
                
                // –®—É–∫–∞—î–º–æ –≤ h4 –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
                const h4Elements = document.querySelectorAll('h4');
                for (const h4 of h4Elements) {
                    const text = h4.textContent.trim();
                    const lotMatch = text.match(/(\d+)\s*—Ç–æ—Ä–≥–∏/i);
                    if (lotMatch) {
                        lotExhibitedBy = lotMatch[1];
                        break;
                    }
                }
                
                // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ h4, —à—É–∫–∞—î–º–æ –≤ –æ–ø–∏—Å—ñ –ª–æ—Ç—É
                if (lotExhibitedBy === '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ' && lotDescText && lotDescText !== '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ') {
                    const lotMatch = lotDescText.match(/(\d+)\s*—Ç–æ—Ä–≥/i);
                    if (lotMatch) {
                        lotExhibitedBy = lotMatch[1];
                    }
                }
                
                results.lotExhibitedBy = lotExhibitedBy;
                
                // –ü–µ—Ä—ñ–æ–¥ –ø–æ–¥–∞—á—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π - —à—É–∫–∞—î–º–æ –≤ h6 –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
                for (const h6 of allH6Elements) {
                    const text = h6.textContent.trim();
                    // –®—É–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥ –∑ –¥–∞—Ç–∞–º–∏
                    if (text.includes('–∑ ') && text.includes(' –ø–æ ') && text.includes('.')) {
                        results.proposalPeriod = text;
                        break;
                    }
                }
                
                // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - —à—É–∫–∞—î–º–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ —Å—ñ—Ç–∫–∏
                const coordLabel = Array.from(allH6Elements).find(h6 => h6.textContent.trim() === '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–±\'—î–∫—Ç—É:');
                if (coordLabel) {
                    const gridContainer = coordLabel.closest('.MuiGrid-container');
                    if (gridContainer) {
                        // –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Maps –∞–±–æ —Ç–µ–∫—Å—Ç –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                        const coordLink = gridContainer.querySelector('a[href*="google.com/maps"]');
                        if (coordLink) {
                            results.coordinates = coordLink.textContent.trim();
                        } else {
                            // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —à—É–∫–∞—î–º–æ h6 –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                            const allH6InContainer = gridContainer.querySelectorAll('h6');
                            for (const h6 of allH6InContainer) {
                                if (h6.textContent.trim() !== '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–±\'—î–∫—Ç—É:' && /^[0-9.,\s]+$/.test(h6.textContent.trim())) {
                                    results.coordinates = h6.textContent.trim();
                                    break;
                                }
                            }
                        }
                    }
                }
                
                // –ö–û–ê–¢–£–£ - —à—É–∫–∞—î–º–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ —Å—ñ—Ç–∫–∏
                const koatuuLabel = Array.from(allH6Elements).find(h6 => h6.textContent.trim() === '–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø–æ –ö–û–ê–¢–£–£:');
                if (koatuuLabel) {
                    const gridContainer = koatuuLabel.closest('.MuiGrid-container');
                    if (gridContainer) {
                        // –®—É–∫–∞—î–º–æ h6 –∑ –ö–û–ê–¢–£–£
                        const allH6InContainer = gridContainer.querySelectorAll('h6');
                        for (const h6 of allH6InContainer) {
                            if (h6.textContent.trim() !== '–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø–æ –ö–û–ê–¢–£–£:' && /^[0-9]+$/.test(h6.textContent.trim())) {
                                results.koatuu = h6.textContent.trim();
                                break;
                            }
                        }
                    }
                }
                
                // –ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å - —à—É–∫–∞—î–º–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ —Å—ñ—Ç–∫–∏
                const postalLabel = Array.from(allH6Elements).find(h6 => h6.textContent.trim() === '–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å:');
                if (postalLabel) {
                    const gridContainer = postalLabel.closest('.MuiGrid-container');
                    if (gridContainer) {
                        // –®—É–∫–∞—î–º–æ h6 –∑ –ø–æ—à—Ç–æ–≤–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º
                        const allH6InContainer = gridContainer.querySelectorAll('h6');
                        for (const h6 of allH6InContainer) {
                            if (h6.textContent.trim() !== '–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å:') {
                                const postalText = h6.textContent.trim();
                                results.postalCode = postalText === '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' ? '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' : postalText;
                                break;
                            }
                        }
                    }
                }
                
                // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ
                h4Elements.forEach((h4, index) => {
                    results.h4Elements.push({
                        index: index + 1,
                        text: h4.textContent.trim(),
                        className: h4.className
                    });
                });
                
                allH6Elements.forEach((h6, index) => {
                    results.h6Elements.push({
                        index: index + 1,
                        text: h6.textContent.trim(),
                        className: h6.className
                    });
                });
                
                // –®—É–∫–∞—î–º–æ –ø–æ –≤—Å—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Ç–µ–∫—Å—Ç–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
                const keywords = ['–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞ –≥—Ä–æ—à–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞', '–ö–û–ê–¢–£–£', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–±\'—î–∫—Ç—É', '–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø–æ –ö–û–ê–¢–£–£'];
                
                keywords.forEach(keyword => {
            const walker = document.createTreeWalker(
                document.body,
                NodeFilter.SHOW_TEXT,
                null,
                false
            );
            
                    const textNodes = [];
            let node;
                    while (node = walker.nextNode()) {
                        if (node.textContent.includes(keyword)) {
                            const parent = node.parentElement;
                            textNodes.push({
                                text: node.textContent.trim(),
                                parentTag: parent.tagName,
                                parentClass: parent.className
                            });
                        }
                    }
                    
                    results.keywordSearch[keyword] = textNodes;
                });
                
                return results;
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤ page.evaluate:', error);
                return { error: error.message };
            }
        });
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö:');
        
        if (pageStructure.error) {
            console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${pageStructure.error}`);
            return;
        }
        
        if (!pageStructure) {
            console.log('‚ùå pageStructure –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö');
            return;
        }
        
        // –í–∏–≤–æ–¥–∏–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        console.log('\nüìã –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ:');
        console.log(`  –û–ø–∏—Å –ª–æ—Ç—É: ${pageStructure.lotDescription.substring(0, 100)}...`);
        console.log(`  –ü–ª–æ—â–∞: ${pageStructure.area}`);
        console.log(`  –°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞: ${pageStructure.startPrice}`);
        console.log(`  –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: ${pageStructure.normativePrice}`);
        console.log(`  –ï–∫—Å–ø–µ—Ä—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: ${pageStructure.expertPrice}`);
        console.log(`  –ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä: ${pageStructure.cadastralNumber}`);
        console.log(`  –û–±–ª–∞—Å—Ç—å: ${pageStructure.region}`);
        console.log(`  –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: ${pageStructure.settlement}`);
        console.log(`  –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è: ${pageStructure.organizationName}`);
        console.log(`  –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: ${pageStructure.contactPerson}`);
        console.log(`  –¢–µ–ª–µ—Ñ–æ–Ω: ${pageStructure.phoneNumber}`);
        console.log(`  –î–∞—Ç–∞ –∞—É–∫—Ü—ñ–æ–Ω—É: ${pageStructure.auctionDate}`);
        console.log(`  –ü–µ—Ä—ñ–æ–¥ –ø–æ–¥–∞—á—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π: ${pageStructure.proposalPeriod}`);
        console.log(`  –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –º–∞–π–Ω–∞: ${pageStructure.propertyClassifier}`);
        console.log(`  –õ–æ—Ç –≤–∏—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è: ${pageStructure.lotExhibitedBy}`);
        console.log(`  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${pageStructure.coordinates}`);
        console.log(`  –ö–û–ê–¢–£–£: ${pageStructure.koatuu}`);
        console.log(`  –ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å: ${pageStructure.postalCode}`);
        
        // –í–∏–≤–æ–¥–∏–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ
        console.log('\nüîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ:');
        console.log(`  H4 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${pageStructure.h4Elements.length}`);
        console.log(`  H6 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${pageStructure.h6Elements.length}`);
        
        // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
        console.log('\nüîç –ü–æ—à—É–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤:');
        Object.keys(pageStructure.keywordSearch).forEach(keyword => {
            const results = pageStructure.keywordSearch[keyword];
            console.log(`\n  "${keyword}": –∑–Ω–∞–π–¥–µ–Ω–æ ${results.length} –≤—Ö–æ–¥–∂–µ–Ω—å`);
            results.forEach((result, index) => {
                console.log(`    ${index + 1}. "${result.text}" (${result.parentTag}, –∫–ª–∞—Å: ${result.parentClass})`);
            });
        });
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ —Ñ–∞–π–ª
        try {
            const fs = await import('fs');
            fs.writeFileSync('debug_results.json', JSON.stringify(pageStructure, null, 2));
            console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ debug_results.json');
        } catch (fsError) {
            console.log('\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª:', fsError.message);
        }
        
        // –ü–∞—É–∑–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–≥–ª—è–¥—É
        console.log('\n‚è∏Ô∏è –ü–∞—É–∑–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–≥–ª—è–¥—É - 30 —Å–µ–∫—É–Ω–¥...');
        console.log('–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ DevTools —ñ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏');
        await new Promise(resolve => setTimeout(resolve, 30000));
        
    } finally {
        await browser.close();
    }
}

debugUaLand().catch((e) => {
    console.error(e);
    process.exit(1);
});