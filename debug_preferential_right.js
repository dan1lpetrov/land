import puppeteer from 'puppeteer';

async function debugPreferentialRight() {
    const browser = await puppeteer.launch({
        headless: false, // –ü–æ–∫–∞–∑—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –¥–µ–±–∞–≥—É
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        defaultViewport: { width: 1400, height: 900 },
    });

    try {
        const page = await browser.newPage();
        await page.setUserAgent(
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        );

        const auctionUrl = 'https://prozorro.sale/auction/LAE001-UA-20241206-83575/';
        const resultsUrl = 'https://auction.prozorro.sale/LAE001-UA-20241206-83575/';

        console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∂—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞—É–∫—Ü—ñ–æ–Ω—É...');
        await page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 3000));

        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–µ –ø—Ä–∞–≤–æ
        console.log('üîç –®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–µ –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ...');
        const originalPageAnalysis = await page.evaluate(() => {
            const analysis = {
                priorityInfo: [],
                pageText: document.body.innerText
            };

            // –®—É–∫–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–µ –ø—Ä–∞–≤–æ
            const possibleElements = document.querySelectorAll('*');
            possibleElements.forEach((element, index) => {
                const text = element.textContent.toLowerCase();
                if (text.includes('–ø–µ—Ä–µ–≤–∞–∂–Ω–µ –ø—Ä–∞–≤–æ') || text.includes('–ø–µ—Ä–µ–≤–∞–∂–Ω–∏–º –ø—Ä–∞–≤–æ–º') || text.includes('priority')) {
                    analysis.priorityInfo.push({
                        tagName: element.tagName,
                        className: element.className,
                        text: element.textContent.trim(),
                        html: element.outerHTML
                    });
                }
            });

            return analysis;
        });

        console.log('\nüìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–µ –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ:');
        if (originalPageAnalysis.priorityInfo.length > 0) {
            originalPageAnalysis.priorityInfo.forEach((info, index) => {
                console.log(`  ${index + 1}. ${info.tagName}.${info.className}: ${info.text}`);
            });
        } else {
            console.log('  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–µ –ø—Ä–∞–≤–æ');
        }

        console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∂—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...');
        await page.goto(resultsUrl, { waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 3000));

        // –ó–±–∏—Ä–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        const pageAnalysis = await page.evaluate(() => {
            const analysis = {
                priorityStep: null,
                resultsWrapper: null,
                winnerElement: null,
                allResults: [],
                priorityBidderElements: [],
                pageText: document.body.innerText
            };

            // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ .priority-step
            const priorityStep = document.querySelector('.priority-step');
            if (priorityStep) {
                analysis.priorityStep = {
                    text: priorityStep.textContent.trim(),
                    html: priorityStep.outerHTML,
                    classes: priorityStep.className
                };
            }

            // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ .results-wrapper
            const resultsWrapper = document.querySelector('.results-wrapper');
            if (resultsWrapper) {
                analysis.resultsWrapper = {
                    html: resultsWrapper.outerHTML,
                    resultsCount: resultsWrapper.querySelectorAll('.results').length
                };

                // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                const allResults = resultsWrapper.querySelectorAll('.results');
                allResults.forEach((result, index) => {
                    const resultData = {
                        index: index,
                        classes: result.className,
                        text: result.textContent.trim(),
                        html: result.outerHTML
                    };

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å
                    if (result.classList.contains('is-winner')) {
                        resultData.isWinner = true;
                        analysis.winnerElement = resultData;
                    }

                    // –®—É–∫–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–≤–∞–∂–Ω–æ–≥–æ –ø—Ä–∞–≤–∞
                    const priorityBidder = result.querySelector('.results__priority-bidder, .results__warning.results__priority-bidder');
                    if (priorityBidder) {
                        resultData.priorityBidder = {
                            text: priorityBidder.textContent.trim(),
                            html: priorityBidder.outerHTML,
                            classes: priorityBidder.className
                        };
                        analysis.priorityBidderElements.push(resultData);
                    }

                    analysis.allResults.push(resultData);
                });
            }

            return analysis;
        });

        console.log('\nüìä === –ê–ù–ê–õ–Ü–ó –°–¢–û–†–Ü–ù–ö–ò ===');
        console.log('URL:', resultsUrl);
        
        console.log('\nüîç Priority Step:');
        if (pageAnalysis.priorityStep) {
            console.log('  –¢–µ–∫—Å—Ç:', pageAnalysis.priorityStep.text);
            console.log('  –ö–ª–∞—Å–∏:', pageAnalysis.priorityStep.classes);
            console.log('  HTML:', pageAnalysis.priorityStep.html);
        } else {
            console.log('  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        console.log('\nüèÜ Results Wrapper:');
        if (pageAnalysis.resultsWrapper) {
            console.log('  –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:', pageAnalysis.resultsWrapper.resultsCount);
            console.log('  HTML:', pageAnalysis.resultsWrapper.html);
        } else {
            console.log('  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        console.log('\nüëë Winner Element:');
        if (pageAnalysis.winnerElement) {
            console.log('  –¢–µ–∫—Å—Ç:', pageAnalysis.winnerElement.text);
            console.log('  –ö–ª–∞—Å–∏:', pageAnalysis.winnerElement.classes);
            console.log('  HTML:', pageAnalysis.winnerElement.html);
        } else {
            console.log('  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        console.log('\nüéØ Priority Bidder Elements:');
        if (pageAnalysis.priorityBidderElements.length > 0) {
            pageAnalysis.priorityBidderElements.forEach((element, index) => {
                console.log(`  ${index + 1}. –¢–µ–∫—Å—Ç:`, element.priorityBidder.text);
                console.log(`     –ö–ª–∞—Å–∏:`, element.priorityBidder.classes);
                console.log(`     HTML:`, element.priorityBidder.html);
            });
        } else {
            console.log('  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        console.log('\nüìã –í—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
        pageAnalysis.allResults.forEach((result, index) => {
            console.log(`  ${index + 1}. –ö–ª–∞—Å–∏: ${result.classes}`);
            console.log(`     –¢–µ–∫—Å—Ç: ${result.text.substring(0, 100)}...`);
            if (result.priorityBidder) {
                console.log(`     Priority Bidder: ${result.priorityBidder.text}`);
            }
        });

        // –¢–µ—Å—Ç—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—É –ª–æ–≥—ñ–∫—É
        console.log('\nüß™ === –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–ò–ü–†–ê–í–õ–ï–ù–û–á –õ–û–ì–Ü–ö–ò ===');
        
        const currentLogicResult = await page.evaluate(() => {
            let preferentialRightStatus = '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
            
            // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–≤–∞–∂–Ω–æ–≥–æ –ø—Ä–∞–≤–∞
            // 1. –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ .priority-step
            const priorityStep = document.querySelector('.priority-step');
            if (priorityStep) {
                const priorityText = priorityStep.textContent.trim().toLowerCase();
                
                if (priorityText.includes('—É—á–∞—Å–Ω–∏–∫ –∑ –ø–µ—Ä–µ–≤–∞–∂–Ω–∏–º –ø—Ä–∞–≤–æ–º –Ω–µ —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è –Ω–∏–º')) {
                    preferentialRightStatus = '–ù–µ —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è';
                } else if (priorityText.includes('—É—á–∞—Å–Ω–∏–∫ –∑ –ø–µ—Ä–µ–≤–∞–∂–Ω–∏–º –ø—Ä–∞–≤–æ–º –±—É–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')) {
                    preferentialRightStatus = '–ë—É–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π';
                } else {
                    // –Ø–∫—â–æ –≤ .priority-step –Ω–∞–∑–≤–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ (–Ω–µ —Å—Ç–∞—Ç—É—Å), –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å
                    const resultsWrapper = document.querySelector('.results-wrapper');
                    if (resultsWrapper) {
                        const winnerElement = resultsWrapper.querySelector('.results.is-winner');
                        if (winnerElement) {
                            const winnerText = winnerElement.querySelector('.results__text');
                            if (winnerText && priorityStep.textContent.trim().includes(winnerText.textContent.trim())) {
                                preferentialRightStatus = '–°–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è';
                            } else {
                                preferentialRightStatus = '–ù–µ —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è';
                            }
                        } else {
                            preferentialRightStatus = '–ù–µ —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è';
                        }
                    } else {
                        preferentialRightStatus = '–ù–µ —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è';
                    }
                }
            } else {
                // 2. –Ø–∫—â–æ .priority-step –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å priority-bidder
                const resultsWrapper = document.querySelector('.results-wrapper');
                if (resultsWrapper) {
                    const winnerElement = resultsWrapper.querySelector('.results.is-winner');
                    if (winnerElement) {
                        const priorityBidder = winnerElement.querySelector('.results__priority-bidder, .results__warning.results__priority-bidder');
                        if (priorityBidder) {
                            preferentialRightStatus = '–°–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è';
                        } else {
                            // –Ø–∫—â–æ –Ω–µ–º–∞—î priority-bidder —É –ø–µ—Ä–µ–º–æ–∂—Ü—è, —Ü–µ –æ–∑–Ω–∞—á–∞—î —â–æ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –Ω–µ –±—É–ª–æ —É—á–∞—Å–Ω–∏–∫–∞ –∑ –ø–µ—Ä–µ–≤–∞–∂–Ω–∏–º –ø—Ä–∞–≤–æ–º
                            preferentialRightStatus = '–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫–∞ –∑ –ø–µ—Ä–µ–≤–∞–∂–Ω–∏–º –ø—Ä–∞–≤–æ–º';
                        }
                    } else {
                        preferentialRightStatus = '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–µ –ø—Ä–∞–≤–æ';
                    }
                } else {
                    preferentialRightStatus = '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–µ –ø—Ä–∞–≤–æ';
                }
            }
            
            return {
                result: preferentialRightStatus,
                priorityStepFound: !!priorityStep,
                resultsWrapperFound: !!document.querySelector('.results-wrapper'),
                winnerElementFound: !!document.querySelector('.results.is-winner'),
                priorityBidderFound: !!document.querySelector('.results__priority-bidder, .results__warning.results__priority-bidder')
            };
        });

        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ç–æ—á–Ω–æ—ó –ª–æ–≥—ñ–∫–∏:', currentLogicResult.result);
        console.log('Priority Step –∑–Ω–∞–π–¥–µ–Ω–æ:', currentLogicResult.priorityStepFound);
        console.log('Results Wrapper –∑–Ω–∞–π–¥–µ–Ω–æ:', currentLogicResult.resultsWrapperFound);
        console.log('Winner Element –∑–Ω–∞–π–¥–µ–Ω–æ:', currentLogicResult.winnerElementFound);
        console.log('Priority Bidder –∑–Ω–∞–π–¥–µ–Ω–æ:', currentLogicResult.priorityBidderFound);

        // –ü–∞—É–∑–∞ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –±—Ä–∞—É–∑–µ—Ä
        console.log('\n‚è∏Ô∏è –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–≥–ª—è–¥—É –±—Ä–∞—É–∑–µ—Ä–∞...');
        await new Promise(resolve => setTimeout(resolve, 10000));

    } finally {
        await browser.close();
    }
}

debugPreferentialRight().catch(console.error);
